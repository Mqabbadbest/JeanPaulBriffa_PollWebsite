@model IEnumerable<Domain.Models.Poll>

@{
    ViewData["Title"] = "Polls";
}
<div class="row mb-4 align-items-center">
    <div class="col">
        <h2 class="mb-0">Active Polls</h2>
    </div>
    <div class="col-auto">
        <a href="/Poll/Create" class="btn btn-dark">Add Poll</a>
    </div>
</div>


<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">


    @foreach (var poll in Model)
    {
        var totalVotes = (poll.Option1VotesCount + poll.Option2VotesCount + (poll.Option3VotesCount ?? 0));
        <div class="col">
            <div class="card shadow-lg h-100 border border-dark poll-card">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div>
                        <h5 class="card-title">@poll.Title</h5>
                        <p class="card-text text-muted">@poll.Description</p>
                        <span class="badge bg-dark text-light mb-2">Votes: @totalVotes</span>
                        <br />
                        <small class="text-muted">Created by: <strong>@poll.Author?.Email</strong></small>
                        <br />
                        <small class="text-muted">Posted: @poll.DateCreated.ToString("dd MMM yyyy")</small>
                    </div>
                    <div class="mt-3 d-flex justify-content-between">
                        <a class="btn btn-dark btn-sm" href="/Poll/Vote?pollId=@poll.Id">🗳️ Vote</a>
                        <a class="btn btn-outline-dark btn-sm"
                           data-bs-toggle="modal"
                           data-bs-target="#resultsModal-@poll.Id">
                            📊 Results
                        </a>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="resultsModal-@poll.Id">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content border-dark">
                        <div class="modal-header border-0">
                            <h5 class="modal-title" id="resultsModalLabel-@poll.Id">📊 Results: @poll.Title</h5>
                            <button type="button" class="btn-close btn-close-dark" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        @if (poll.Option1VotesCount != 0 || poll.Option2VotesCount != 0 || poll.Option3VotesCount != 0)
                        {
                            <div class="modal-body">
                                <canvas id="chart-@poll.Id" class="w-100"></canvas>
                            </div>
                        }
                        else
                        {
                            <div class="modal-body">
                                <p class="text-center text-muted">No votes yet.</p>
                            </div>
                        }
                        <div class="modal-footer border-0">
                            <span class="text-dark">Total votes: <strong>@(poll.Option1VotesCount + poll.Option2VotesCount + (poll.Option3VotesCount ?? 0))</strong></span>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    }
</div>

<style>
    .poll-card {
        transition: transform 0.25s ease, box-shadow 0.25s ease;
    }

    .poll-card:hover {
        transform: scale(1.02);
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.2);
        border-color: #333 !important; 
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    @if (TempData["VoteState"]?.ToString() == "duplicate")
    {
        TempData.Remove("VoteState");
        <script>
            Swal.fire({
            icon: 'warning',
            title: 'Already Voted!',
            text: 'You can only vote once on a poll.',
            confirmButtonColor: '#212529',
            confirmButtonText: 'OK'
            });
        </script>
    }
    @if (TempData["PollCreationState"] != null)
    {
        var status = TempData["PollCreationState"]!.ToString();
        TempData.Remove("PollCreationState");
        var icon = status.Contains("Error") ? "error" : "success";
        <script>
            Swal.fire({
            icon: '@icon',
            title: '@status',
            showConfirmButton: false,
            timer: 1500
            });
        </script>
    }
    @if (TempData["VotingState"] != null)
    {
        var status = TempData["VotingState"]!.ToString();
        TempData.Remove("VotingState");
        var icon = status.Contains("Error") ? "error" : "success";
        <script>
            Swal.fire({
            icon: '@icon',
            title: '@status',
            showConfirmButton: false,
            timer: 1500
            });
        </script>
    }

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const polls = @Html.Raw(ViewBag.PollJsonData)

            polls.forEach(poll => {
                const modal = document.getElementById(`resultsModal-${poll.Id}`);

                let labels = [poll.Option1Text, poll.Option2Text];

                let data = [poll.Option1VotesCount, poll.Option2VotesCount];

                if(poll.Option3Text){
                    labels.push(poll.Option3Text);
                    data.push(poll.Option3VotesCount);
                }
                modal.addEventListener('shown.bs.modal', () => {
                    const ctx = document.getElementById(`chart-${poll.Id}`);

                    new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: labels,
                            datasets: [{
                                data: data,
                                backgroundColor: ['#0d6efd', '#198754', '#ffc107'],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'bottom'
                                }
                            }
                        }
                    });
                });
            });
        });
    </script>
}
